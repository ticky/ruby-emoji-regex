#!/usr/bin/env node

const fs = require('fs');
const glob = require('glob');
const path = require('path');

const replaceEscapes = (regexFactory) => (
  // request the regex
  regexFactory()
    // convert regex to string so we can replace things
    .toString()
    // replace incompatible single-byte escapes
    .replace(/\\x([a-zA-Z0-9]{2})/g, '\\u00$1')
    // remove incompatible flags
    .slice(0, -2)
);

const emojiRegexRGI = replaceEscapes(require('emoji-regex/es2015/RGI_Emoji'));
const emojiRegex = replaceEscapes(require('emoji-regex/es2015'));
const emojiRegexText = replaceEscapes(require('emoji-regex/es2015/text'));

const srcPath = path.join(__dirname, '../src');
const libPath = path.join(__dirname, '../lib');

glob(
  '**/*',
  {
    cwd: srcPath,
    mark: true
  },
  (error, files) => {
    if (error) {
      throw error;
    }

    files.forEach((file) => {
      const dest = path.join(libPath, file);

      // If this is a directory, create it in the destination
      if (dest.endsWith('/')) {
        console.log(`Creating directory: ${dest}...`);
        try {
          fs.mkdirSync(dest);
        } catch (error) {
          // Ignore already-existing directories
          if (error.code !== 'EEXIST') {
            throw error;
          }
        }
      } else {
        console.log(`Processing file: ${dest}...`);

        const input = fs.readFileSync(path.join(srcPath, file), 'utf8');

        const output = input
          .replace('/% emojiRegexRGI %/', emojiRegexRGI)
          .replace('/% emojiRegex %/', emojiRegex)
          .replace('/% emojiRegexText %/', emojiRegexText);

        fs.writeFileSync(dest, output);
      }
    });
  }
);

console.log(`Done!`);
